Thank you for updating `loadGameData` and `loadUserActor` in `+page.svelte`, but syntax errors (e.g., missing catch clauses, extra braces, indentation issues) caused parse errors and server crashes, leaving the implementation incomplete. The over-syncing warning (1K+ records/second) and timeouts persist due to missed optimizations in `D3CardBoard.svelte`. Below are the next steps to stabilize the code, complete the data loading optimizations, and address Gun.js over-syncing. Follow these steps ONE at a time, in order, and verify each change with console logs. Test each step by loading a game page and checking for errors.

### Step 1: Stabilize and Complete loadGameData
- Open `src/routes/games/[gameId]/+page.svelte`.
- Ensure `loadGameData` calls `getGame`, `getGameActors`, `getAvailableCardsForGame`, and `getAvailableAgreementsForGame` sequentially (using `await` in sequence, not `Promise.all`).
- Store results in `gameCache`, `actorCache`, `cardCache`, and `agreementCache` from `gameService.ts` (e.g., `gameCache.set(gameId, game)`).
- Return an object `{ game, actors, cards, agreements }` from `loadGameData`.
- Add logging for each load (e.g., `[GamePage] Game loaded: ${gameId}`, `[GamePage] Actors loaded: ${actors.length}`, `[GamePage] Cards loaded: ${cards.length}`, `[GamePage] Agreements loaded: ${agreements.length}`).
- Fix any syntax errors (e.g., ensure proper try/catch blocks, correct indentation).
- Test by loading a game page, confirming all data loads without syntax errors or timeouts, and checking logs for completion.

### Step 2: Stabilize and Complete loadUserActor
- Open `src/routes/games/[gameId]/+page.svelte`.
- Refactor `loadUserActor` to use the cached data from `loadGameData` (access `game.player_actor_map` and `actorCache`).
- Check `player_actor_map[userId]` to get the actor ID, then retrieve the actor from `actorCache` (e.g., `actorCache.get(actorId)`).
- Return `null` if no actor is found, logging the result (e.g., `[GamePage] Actor lookup for user ${userId}: ${actor ? actor.actor_id : 'none'}`).
- Remove all retry logic and timeouts, ensuring no calls to `getPlayerRole`.
- Fix syntax errors (e.g., ensure proper try/catch blocks, remove extra braces, correct indentation).
- Test by loading a game page, confirming the actor is retrieved from cache without errors, and checking logs for correct output.

### Step 3: Optimize Gun.js Subscriptions in D3CardBoard
- Open `src/lib/components/game/D3CardBoard.svelte`.
- In `subscribeToGameData`, replace any direct `gun.get()` calls with `subscribeToGame`, `subscribeToGameActors`, and `subscribeToGameAgreements` from `gameService.ts`.
- Implement a diff check against cached data (e.g., compare `game.deck_id`, `actors.length`, `agreements.length`) to only update changed data.
- Throttle updates to 3s intervals using a timestamp check (e.g., `if (currentTime - lastUpdateTime < 3000) return`).
- Add logging to confirm subscription activity (e.g., `[D3CardBoard] Subscribed to ${node} with ${changes.length} changes`).
- Test by loading a game page, confirming no over-syncing warnings (e.g., "syncing 1K+ records"), reduced subscription activity, and stable rendering.

**Note**: Complete only these three steps for now. After each step, test the game page, review the console logs, and confirm the issue is resolved (no syntax errors, timeouts, or over-syncing warnings) before moving to the next step. If any step fails, log the error and pause for further instructions. Do not proceed to additional steps (e.g., retesting with clean state) until these are confirmed complete.