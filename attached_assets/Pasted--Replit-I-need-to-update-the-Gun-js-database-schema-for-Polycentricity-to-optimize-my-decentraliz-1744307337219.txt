"Replit, I need to update the Gun.js database schema for 'Polycentricity' to optimize my decentralized eco-village game. We’ve added a role property to users to distinguish between Guest, Member, and Admin roles. Here’s the full, updated structure:

Schema
cards: Static role templates.
Properties: card_id (e.g., 'c1'), role_title ('Verdant Weaver'), backstory, values (array), goals, obligations, capabilities, intellectual_property, rivalrous_resources, card_category ('Funders'|'Providers'|'Supporters'), type ('DAO'|'Practice'|etc.).
decks: Card sets.
Properties: deck_id ('d1'), name ('Eco-Village Standard Deck'), cards (array of card_ids), creator (user_id).
users: Player accounts with roles.
Properties: user_id ('u123'), name, email, magic_key, devices (array), created_at, role ('Guest'|'Member'|'Admin' — defaults to 'Guest').
games: Active games.
Properties: game_id ('g456'), name, creator (user_id), deck_id, role_assignment ('random'|'choice'), players ({ user_id: actor_id }), created_at, status ('active'|'ended').
actors: Player roles in games.
Properties: actor_id ('a1'), game_id, user_id, card_id.
agreements: Actor agreements.
Properties: agreement_id ('ag1'), game_id, title, summary, type ('symmetric'|'asymmetric'), parties (array of actor_ids), obligations ({ actor_id: text }), benefits ({ actor_id: text }), created_at.
chat: Messages.
Properties: chat_id ('g456_group'), game_id (or null for DMs), type ('group'|'private'), participants (array of user_ids for DMs), messages (array of { actor_id|user_id, text, timestamp }).
node_positions: Graph layout.
Properties: node_id (actor_id or agreement_id), game_id, x, y.

Changes
Replace actors with cards for static role definitions (i will give you the 52-card deck to load up later).
Add decks to group cards, referenced by games.deck_id.
Redefine actors as game-specific instances linking users to cards.
Fold obligations and benefits into agreements as properties.
Update users to include role ('Guest', 'Member', 'Admin'), defaulting to 'Guest' on registration.
Keep games, chat, node_positions with minor relationship tweaks.
Task
Update the Gun.js schema in my SvelteKit project:

Create sample data:
1 user (u123, role: 'Member'), 1 guest (u124, role: 'Guest'), 1 admin (u125, role: 'Admin').
1 deck (d1) with 2 cards (c1: 'Verdant Weaver', c2: 'Luminos Funder').
1 game (g456) using d1, with 2 players (u123: a1, u124: a2).
2 actors (a1, a2) linking users to cards.
1 agreement (ag1) between a1 and a2.
1 group chat (g456_group) with 1 message.
2 node positions (a1, ag1).

Adjust existing files to use this structure (e.g., gun.get('cards') instead of actors).
Test by logging each node type to console (e.g., gun.get('users').map().once(console.log)).
Ensure compatibility with Skeleton UI (Fennec theme) and Tailwind CSS v4.
What do you think, Replit? Can you refactor my Gun.js setup with this schema?"








Simple user stories:
Here are the user-stories that come to mind:
1.  User joins and creates an account (simple name, email).
2.  User gets a magic key sent to email to confirm and login.  If user is logging in from a different device - another magic key is sent to them that they can use to get into their account.
3.  User is presented with a list of active games.  They can join a game or create a new one.
4.  When user joins a game, they are given a Role (Actor) based on Game parameters (the game creator will decide whether role cards are given out randomly or the user can choose, etc.).

EXAMPLE GUN NODES:

users Node
Stores user accounts and authentication tokens.
Example:
{
  "user_id": "u123",
  "name": "Alice",
  "email": "alice@example.com",
  "magic_key": "xyz789", // Temporary token sent via email
  "devices": ["device1_hash", "device2_hash"], // Track logged-in devices
  "created_at": "2025-04-09T10:00:00Z"
}

games Node
Stores active games, their settings, and participants.
Example:
{
  "game_id": "g456",
  "name": "Eco-Village Thrive #1",
  "creator": "u123",
  "deck_type": "predefined", // or "custom"
  "deck": ["A1", "A2", ..., "A52"], // Predefined deck IDs or custom roles
  "role_assignment": "random", // or "choice"
  "players": {
    "u123": "A1",
    "u124": "A2"
  },
  "created_at": "2025-04-09T10:05:00Z",
  "status": "active"
}

actors Node
Stores the role card info as per the previous script.
Example
{
  "actor_id": "A1",
  "role_title": "Luminos Funder",
  "backstory": "...",
  "values": ["Sustainability", "Equity"],
  "goals": "...",
  "obligations": "...",
  "capabilities": "...",
  "intellectual_property": "...",
  "rivalrous_resources": "...",
  "card_category": "Funders",
  "type": "Individual"
}



chat Node
Stores game-specific group chats and private DMs.
Example (group chat):
{
  "game_id": "g456",
  "type": "group",
  "messages": [
    {
      "actor_id": "A1",
      "text": "Hey team, let’s fund a water system!",
      "timestamp": "2025-04-09T10:10:00Z"
    }
  ]
}
Example (DM):
{
  "from": "u123",
  "to": "u124",
  "messages": [
    {
      "text": "Can your farmer supply my project?",
      "timestamp": "2025-04-09T10:15:00Z"
    }
  ]
}
