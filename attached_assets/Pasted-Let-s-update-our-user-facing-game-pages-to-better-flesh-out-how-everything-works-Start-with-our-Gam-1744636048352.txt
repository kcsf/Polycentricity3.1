Let's update our user-facing game pages to better flesh out how everything works. Start with our Games page at /games, which lists all the available games. When a user joins a game, implement the following logic:

Display Active Games: Fetch and display all active games from the Gun.js database (nodes.games), showing details like name, description, creator, player count (players map length vs. max_players), and status. Include a "Join" button for each game, disabled if the game is full.
Joining a Game:
Check Availability: Verify the game is active (status: "active") and not full (compare players count to max_players). Ensure the user (user_id, e.g., u126) isn’t already in the players map.
Select or Create an Actor:
Fetch existing actors for the user (users/<user_id>/actors). If any exist, display them in a dropdown for selection.
If no actors exist or the user wants a new one, allow them to create a new actor with:
ActorType: A dropdown with options "National Identity" or "Sovereign Identity".
Name: A text input for the actor’s custom name (string).
Create the new actor node (actors/<actor_id>) with these fields, plus game_id, user_id, card_id (to be selected next), created_at, status: "active", and an empty agreements object.
Select a Card: Check the game’s role_assignment. If it is "choice", fetch the game’s deck (deck_id) and its available cards not in use by other actors (decks/<deck_id>/cards), presenting them in a dropdown for the user to select a card (e.g., c1 or c2). If it is "random", auto-assign a random card that is not already in use.
Update the Game: Add the user to the game’s players map (games/<game_id>/players) with their user_id mapped to the actor_id. Update updated_at.
Create Edges:
users/<user_id>/actors -> actors/<actor_id>
actors/<actor_id>/card -> cards/<card_id>
actors/<actor_id>/game -> games/<game_id>
Update Chat: Add the user to the game’s group chat (chat/<game_id>_group/participants). Optionally, add a system message indicating the user joined.
Post-Join: Redirect the user to the game page (e.g., /game/<game_id>) and update the Games page in real-time to reflect the new player count.
Handle errors (e.g., game not found, max players reached) and provide a smooth user experience with confirmation messages.