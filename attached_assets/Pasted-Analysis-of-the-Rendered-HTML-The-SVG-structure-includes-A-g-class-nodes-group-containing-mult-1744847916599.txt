Analysis of the Rendered HTML
The SVG structure includes:

A <g class="nodes"> group containing multiple <g> elements, each representing a node (e.g., id="node-card_m9ej0qxdf0zko4f8").
Within each node <g>:
A <circle> element for the node's center.
A <foreignObject> for the central icon.
A <g class="card-name-container"> for the node's label.
A <g class="center-text-group"> for additional text.
However, there are no <g class="category-group"> or <path class="category-wedge"> elements within any of the node <g> elements. These are the elements typically responsible for rendering the donut ring wedges around the nodes. This absence confirms that the wedges are not making it into the DOM, even though the logs indicate that addDonutRings executed.

Why Aren’t the Wedges Visible?
If the wedges were being added as claimed by the logs, we would see <path> elements (likely with a class like category-wedge) inside a <g class="category-group"> within each node's <g>. Since they’re missing, here are the likely reasons:

Wedges Not Appended to the DOM:
The addDonutRings function might be failing to append the wedges to the correct DOM elements. For example, it could be selecting the wrong parent element (e.g., not targeting the node <g> elements properly) or not appending the wedges at all due to a coding error.
Subsequent Removal or Overwriting:
Even if addDonutRings initially adds the wedges, a later part of the code might remove or overwrite them before the SVG is rendered. This could happen if the DOM is cleared or re-rendered after the wedges are added.
Visibility Issues (Less Likely):
If the wedges were appended but had styles like opacity: 0 or visibility: hidden, they wouldn’t be visible. However, since they’re not even present in the HTML, this isn’t the issue here.
The most probable explanation, given the complete absence of wedge-related elements, is that the wedges are not being successfully appended by addDonutRings, despite the logs suggesting otherwise.

Addressing Your Point
Your statement, "if that was true, we'd see them in the rendered HTML," directly aligns with this analysis. If addDonutRings were working as intended, the <path class="category-wedge"> elements would appear in the DOM, nested within each node’s <g> under a <g class="category-group">. Since they’re not there, it’s evident that the function isn’t correctly adding them—or they’re being removed before rendering.

Proposed Fix
To resolve this, the fix should focus on ensuring the wedges are properly appended to the DOM and persist in the final render. Here’s what needs to be checked and corrected:

Verify Selection: Ensure addDonutRings correctly selects the node elements (e.g., d3.selectAll('.node')) and appends the wedges to them.
Append Logic: Confirm that the function creates and appends <g class="category-group"> and <path class="category-wedge"> elements for each node, using the appropriate data (e.g., _valueNames or _capabilityNames).
Prevent Overwriting: Check the rendering pipeline to ensure no subsequent code removes or overrides the wedges after they’re added.
Debugging: Update the logging to inspect the DOM after addDonutRings runs (e.g., console.log(nodeElements.html())) to confirm the wedges are present at that stage.