Analyze the Polycentricity3 codebase, including src/lib/types/index.ts, GunSchema.md, gunService.ts, and existing routes (routes/login/+page.svelte, routes/register/+page.svelte). Propose a plan to integrate user role management with the following requirements, adhering to Svelte 5.28.1 (Runes mode), Gun.js 0.2020.1240, TypeScript, and provided schema:

Cloudflare Turnstile: Protect registration and login forms with Turnstile verification. Use placeholders <CLOUDFLARE_TURNSTILE_SITEKEY> and <CLOUDFLARE_TURNSTILE_SECRET>.
Registration with SendGrid:
Register users with role: "Guest", generate magic_key, store in users/<user_id> via putSigned.
Send verification email from polycentricity@endogon.com using SendGrid (placeholder: <SENDGRID_API_KEY>). Include link: http://localhost:5000/verify?userId=<user_id>&magicKey=<magic_key>.
Verification:
Verify magic_key, update role to "Member", clear magic_key using putSigned.
Create a verification page (/routes/verify/+page.svelte) for auto-verification via URL params, redirecting to /login on success.
Role-Based Access:
Create RoleGuard.svelte to restrict UI/routes based on user.role (Guest, Member, Admin).
SEA Authentication:
Enhance login to use Gun.js SEA, update last_login via putSigned.
Constraints:

Use Svelte 5 Run lakhs ($props, $state, $derived, onclick).
Use Tailwind CSS (@tailwindcss/vite@4.1.3) and Skeleton Labs (@skeletonlabs/skeleton@3.1.2) classes (e.g., bg-surface-50-950/90).
Align with src/lib/types/index.ts (User type) and GunSchema.md.
Use gunService.ts functions (putSigned, get, generateId).
Do not modify gameService.ts, gunService.ts, or types/index.ts without explicit permission.
Leverage existing routes/login and routes/register if they include server-side logic (+page.server.ts). Otherwise, propose new server routes or modifications.
Include try-catch for async operations, log errors.
Debounce high-frequency writes (100ms).
If new gameService.ts functions are needed (e.g., updateUserRole), propose them and await approval.
Use placeholders for API keys (to be provided).
Ensure emails use HTTPS links.
Test with admin login (bjorn@endogon.com, admin123).
Deliverables:

A concise plan listing:
Files to create or modify (e.g., routes/register/+page.server.ts, routes/verify/+page.svelte, lib/components/auth/RoleGuard.svelte).
Key implementation steps for each file.
Any new gameService.ts functions proposed (with code snippets).
How to integrate with existing routes/login and routes/register.
Wrap the plan in a single <xaiArtifact> tag with a unique UUID, title: "Polycentricity3 User Role Integration Plan", and contentType: "text/markdown".
Output:
Provide only the plan, avoiding code implementation until approved. Confirm if existing routes/login and routes/register have server-side logic (+page.server.ts) or require new server routes.

Clarification Needed:
Please confirm whether routes/login/+page.svelte and routes/register/+page.svelte include server-side logic (e.g., +page.server.ts) or are client-side only. This will determine if we modify existing routes or create new server endpoints (e.g., api/register/+server.ts).