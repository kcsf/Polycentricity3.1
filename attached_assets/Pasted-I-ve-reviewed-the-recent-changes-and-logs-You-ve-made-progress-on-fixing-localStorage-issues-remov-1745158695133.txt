I’ve reviewed the recent changes and logs. You’ve made progress on fixing localStorage issues, removing temporary actors, and improving Svelte Runes logging, but critical steps were missed or incomplete, particularly around Gun.js query optimization and data loading efficiency. The goal is to:
1. Remove all direct Gun.js calls, using only optimized `gameService.ts` functions.
2. Load all game-related data (game, actors, cards, agreements) once in `loadGameData`, cache it, and reuse it for actor and card retrieval without additional calls.

Follow these steps ONE at a time, in order, and verify each change with appropriate logging. Test each step by loading a game page and checking the console logs.

### Step 1: Encapsulate Agreement Loading in gameService.ts
- Open `src/lib/services/gameService.ts`.
- Create a new function `getAgreement(agreementId: string): Promise<AgreementWithPosition | null>` to fetch an agreement by ID, similar to `getCard`, with caching in `agreementCache`.
- Update `getAvailableAgreementsForGame(gameId: string): Promise<AgreementWithPosition[]>` to fetch all agreements for a game, using `getAgreement` and handling batches (max 10 concurrent).
- Open `src/lib/components/game/D3CardBoard.svelte`.
- Replace the `loadAgreementData` function with a call to `getAgreement` and update `loadGameAgreements` to use `getAvailableAgreementsForGame`.
- Add logging to confirm agreement loading (e.g., `[D3CardBoard] Loaded ${agreements.length} agreements for game ${gameId}`).

### Step 2: Preload All Game Data in loadGameData
- Open `src/routes/games/[gameId]/+page.svelte`.
- Modify `loadGameData` to call `getGame`, `getGameActors`, `getAvailableCardsForGame`, and `getAvailableAgreementsForGame` sequentially, storing results in `gameCache`, `actorCache`, `cardCache`, and `agreementCache` from `gameService.ts`.
- Add logging to confirm each data load (e.g., `[GamePage] Game loaded: ${gameId}`, `[GamePage] Actors loaded: ${actors.length}`, `[GamePage] Cards loaded: ${cards.length}`, `[GamePage] Agreements loaded: ${agreements.length}`).
- Ensure `loadGameData` returns an object with all cached data for use in subsequent steps.

### Step 3: Use Cached Data for Actor Lookup
- Open `src/routes/games/[gameId]/+page.svelte`.
- Refactor `loadUserActor` to use the cached game data from `loadGameData` (specifically `game.player_actor_map` and cached actors).
- Check `player_actor_map[userId]` to get the actor ID, then retrieve the actor from `actorCache` without calling `getPlayerRole`.
- Return `null` if no actor is found, logging the result (e.g., `[GamePage] Actor lookup for user ${userId}: ${actor ? actor.actor_id : 'none'}`).

### Step 4: Optimize Gun.js Subscriptions
- Open `src/lib/components/game/D3CardBoard.svelte`.
- In `subscribeToGameData`, replace direct `gun.get()` calls with `subscribeToGame` and `subscribeToGameActors` from `gameService.ts`.
- Implement a diff check against cached data (e.g., compare `game.deck_id`, `actors.length`) to only update changed data.
- Throttle updates to 3s intervals and use `once()` for non-critical nodes.
- Add logging to confirm subscription activity (e.g., `[D3CardBoard] Subscribed to ${node} with ${changes.length} changes`).

### Step 5: Profile Gun.js Queries
- Open `src/lib/components/game/D3CardBoard.svelte`.
- In `onMount`, enable Gun.js debugging with `getGun().stats = true`.
- Log query statistics to identify excessive queries (e.g., `[D3CardBoard] Gun.js stats: ${JSON.stringify(gun.stats)}`).
- Focus on nodes like `games`, `actors`, `cards`, and `agreements`, and note any queries exceeding 100 records/second.

### Step 6: Verify D3 Initialization Order
- Open `src/lib/components/game/D3CardBoard.svelte`.
- Add a state flag `let dataLoaded = $state(false)` to track when `loadGameData` completes.
- Modify `initializeVisualization` to only call `initializeD3Graph` if `dataLoaded` is true.
- Add logging to confirm order (e.g., `[D3CardBoard] Data loaded: ${dataLoaded}`, `[D3CardBoard] D3 graph initialized`).

### Step 7: Clean Up Subscriptions
- Open `src/lib/components/game/D3CardBoard.svelte`.
- In the `onDestroy` block, ensure all `unsubscribe` functions in the `unsubscribe` array are called.
- Add logging to confirm cleanup (e.g., `[D3CardBoard] Unsubscribed ${unsubscribe.length} subscriptions`).
- Test by navigating away from the game page and checking for memory leaks.

### Step 8: Remove Remaining Timeouts
- Open `src/routes/games/[gameId]/+page.svelte` and `src/lib/components/game/D3CardBoard.svelte`.
- Remove all remaining timeouts (e.g., 8s in `initializeVisualization`, 15s in `loadUserActor`).
- Replace with promise-based error handling, logging failures (e.g., `[GamePage] Actor load failed: ${error}`).

### Step 9: Retest with Clean State
- Clear `localStorage` and restart the Replit environment.
- Navigate to a game page and monitor the console logs.
- Verify that:
  - No Gun.js over-syncing warnings appear.
  - Game data loads in the correct order (game, actors, cards, agreements).
  - No timeouts or retry errors occur.
  - Actor lookups use cached data and return valid results.
  - D3 visualization initializes only after data is loaded.
- Take a screenshot of the logs and create a checkpoint.

**Note**: After each step, test the game page, review the console logs, and confirm the issue is resolved before moving to the next step. If any step fails, log the error and pause for further instructions.