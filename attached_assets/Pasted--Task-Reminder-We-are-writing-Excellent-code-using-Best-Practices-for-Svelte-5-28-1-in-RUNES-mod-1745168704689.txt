**Task Reminder**: We are writing Excellent code using Best Practices for Svelte 5.28.1 in RUNES mode, with primary packages: `"@tailwindcss/vite": "^4.1.3"`, `"gun": "^0.2020.1240"`, `"d3": "^7.9.0"`, `"@skeletonlabs/skeleton": "^3.1.2"`. Always use optimized functions from `src/lib/services/gameService.ts` for Gun.js interactions, avoiding direct or duplicate `gun.db` calls. Check all files for TypeScript errors before saving using `svelte-check` or your IDE. Do not use temporary or hardcoded fallback values (e.g., remove `augmentCardValues` or similar logic that substitutes database values with hardcoded arrays like `['Sustainability', 'Ecological Thinking', 'Self Reliance']`).

The game page loads, but a 3-second timeout in `loadUserActor` (`[GamePage] User actor loading timed out after 3 seconds`) and excessive `localStorage` logging (15 repetitions) indicate an over-complicated implementation. This task replaces `loadUserActor` with a simple, optimized version that retrieves the current user’s Actor for the current GameID using `getPlayerRole` and `actorCache` from `gameService.ts`. Complete this step, test thoroughly, and confirm the issue is resolved before stopping.

### Step 1: Replace loadUserActor with Optimized Implementation
- Open `src/routes/games/[gameId]/+page.svelte`.
- Replace the entire `loadUserActor` function (lines 184–273) with the following code snippet:

```typescript
import { getPlayerRole, actorCache } from '$lib/services/gameService';
import { userStore } from '$lib/stores/userStore';

async function loadUserActor(gameId: string): Promise<Actor | null> {
  const user = $userStore.user;
  if (!user || !user.user_id) {
    console.log('[GamePage] No user logged in, cannot load actor');
    return null;
  }

  // Check localStorage for a cached actor ID and validate it
  const savedActorId = localStorage.getItem(`game_${gameId}_actor`);
  if (savedActorId && actorCache.has(savedActorId)) {
    const actor = actorCache.get(savedActorId)!;
    if (actor.game_id === gameId && actor.user_id === user.user_id) {
      console.log(`[GamePage] Actor lookup for user ${user.user_id}: ${actor.actor_id} (from cache)`);
      return actor;
    }
  }

  // Fetch actor using getPlayerRole
  const actor = await getPlayerRole(gameId, user.user_id);
  if (actor) {
    console.log(`[GamePage] Actor lookup for user ${user.user_id}: ${actor.actor_id}`);
    localStorage.setItem(`game_${gameId}_actor`, actor.actor_id); // Cache for future loads
  } else {
    console.log(`[GamePage] Actor lookup for user ${user.user_id}: none`);
  }

  return actor;
}