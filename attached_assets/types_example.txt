/**
 * Optimized Gun.js schema interfaces for Polycentricity
 * 
 * Key changes:
 * - Uses Record<string, boolean> for collection references
 * - Adds proper typing for status fields with enums
 * - Includes improved typing for chat messages
 * - Optimizes game player references
 * - Adds D3 visualization types
 */

// User interface
export interface User {
    user_id: string;
    name: string;
    email: string;
    magic_key?: string;
    devices?: Record<string, boolean>;
    created_at: number;
    role: 'Guest' | 'Member' | 'Admin';
    last_login?: number;
}

// Value interface
export interface Value {
    value_id: string;
    name: string;
    description?: string;
    created_at: number;
    creator?: string;
    cards?: Record<string, boolean>;
}

// Capability interface
export interface Capability {
    capability_id: string;
    name: string;
    description?: string;
    created_at: number;
    creator?: string;
    cards?: Record<string, boolean>;
}

// Card interface
export interface Card {
    card_id: string;
    card_number: number;
    role_title: string;
    backstory: string;
    values: Record<string, boolean>;
    goals: string;
    obligations?: string;
    capabilities: Record<string, boolean>;
    intellectual_property?: string;
    rivalrous_resources?: string;
    card_category: 'Funders' | 'Providers' | 'Supporters';
    type: 'DAO' | 'Practice' | 'Individual' | string;
    icon?: string;
    decks?: Record<string, boolean>;
    created_at: number;
    creator?: string;
}

// Card with position for D3 visualizations
export interface CardWithPosition extends Card {
    position: { x: number; y: number };
    _valueNames?: string[];
    _capabilityNames?: string[];
}

// Deck interface
export interface Deck {
    deck_id: string;
    name: string;
    description?: string;
    cards: Record<string, boolean>;
    creator: string;
    created_at: number;
    updated_at?: number;
    is_public?: boolean;
    image_url?: string;
}

// Game interface
export interface Game {
    game_id: string;
    name: string;
    description?: string;
    creator: string;
    deck_id: string;
    deck_type?: string;
    role_assignment_type: string;
    role_assignment: Record<string, string>;
    players: Record<string, boolean>;
    player_actor_map?: Record<string, string>;
    created_at: number;
    updated_at?: number;
    status: GameStatus;
    end_date?: number;
    max_players?: number;
    password?: string;
    agreement_ids?: string[];
    deck?: Record<string, any>;
    roles?: Record<string, any>;
    player_refs?: Record<string, any>;
    actor_refs?: Record<string, any>;
    deck_ref?: Record<string, any>;
}

// Actor interface
export interface Actor {
    actor_id: string;
    game_id: string;
    user_id: string;
    card_id: string;
    created_at: number;
    custom_name?: string;
    actor_type: 'National Identity' | 'Sovereign Identity';
    status: 'active' | 'inactive';
    agreements?: Record<string, boolean>;
}

// Chat message interface
export interface ChatMessage {
    id: string;
    game_id: string;
    user_id: string;
    user_name: string;
    content: string;
    timestamp: number;
    type: 'group' | 'private';
    recipient_id?: string | null;
    read_by?: Record<string, boolean>;
}

// Chat room interface
export interface ChatRoom {
    chat_id: string;
    game_id: string;
    type: 'group' | 'private';
    participants: Record<string, boolean>;
    messages: Record<string, ChatMessage>;
    created_at: number;
    last_message_at?: number;
}

// Agreement interface
export enum AgreementStatus {
    PROPOSED = 'proposed',
    ACCEPTED = 'accepted',
    REJECTED = 'rejected',
    COMPLETED = 'completed'
}

export interface Agreement {
    agreement_id: string;
    game_id: string;
    title: string;
    summary: string;
    type: 'symmetric' | 'asymmetric';
    parties: Record<string, boolean>;
    obligations: Record<string, string>;
    benefits: Record<string, string>;
    status: AgreementStatus;
    created_at: number;
    updated_at?: number;
    created_by: string;
    votes?: Record<string, 'accept' | 'reject'>;
}

// Agreement with position for D3 visualizations
export interface AgreementWithPosition extends Agreement {
    position: { x: number; y: number };
}

// Node Position interface for graph layout
export interface NodePosition {
    node_id: string;
    game_id: string;
    x: number;
    y: number;
    type: 'actor' | 'agreement';
    last_updated: number;
}

// Game status enum
export enum GameStatus {
    CREATED = 'created',
    SETUP = 'setup',
    ACTIVE = 'active',
    PAUSED = 'paused',
    COMPLETED = 'completed'
}

// User session
export interface UserSession {
    user: User | null;
    isAuthenticated: boolean;
    isLoading: boolean;
}

// D3-specific types for D3CardBoard.svelte
export interface D3Node {
    id: string;
    name: string;
    type: 'actor' | 'agreement';
    data: Card | Agreement;
    _valueNames?: string[];
    _capabilityNames?: string[];
}

export interface D3Link {
    source: D3Node | string;
    target: D3Node | string;
}